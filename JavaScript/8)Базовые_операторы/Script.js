/* Базовые операторы, математика. */


let x = 1;

x = -x;
alert(x); // Выведет -1.


let x1 = 1, y = 4;

alert( y + x1 ); // Выведет 5.

/*
Сложение +,
Вычитание -,
Умножение *,
Деление /,
Взятие остатка от деления %,
Возведение в степень **.
*/


// Взятие остатка %:

alert( 5 % 2); // 1, остаток от деления.
alert( 8 % 3); // 2, остаток от деления.
alert( 8 % 4); // 0, остаток от деления.


// Возведение в степень **:

alert( 4 ** 2); // Выведет 16.
alert( 5 ** 1); // Выведет 5.

alert( 25 ** (1/2) ); // Аналогично взятию квадратного корня. Выведет 5.


// Сложение строк при помощи бинарного "+":

let s = "моя" + " строка"; // На самом деле не моя, я из примера взял :O

alert(s);

// Тут внимание! Если сложить число со строкой, то число преобразуется в строку:

alert( 4 + "5"); // Выведет 45

// Тут ещё внимательнее:

alert( 4 + 4 + "5"); // Выведет "85"
alert( "5" + 4 + 4 ); // Выведет "544"

// А вот тут уже наоборот! Если вычитать, то строка преобразуется в число:

alert( 6 - "2" ); // Выведет 4.
alert( "25" / "5") // Выведет 5, т.к. обе строки преобразуются в числа.


// "+" преобразует не числа в числа ･ﾟ✧Magic*ﾟヽ(◕ヮ◕ヽ):

alert( +true ); // Выведет 1.
alert( -true ); // Выведет -1.
alert( +"" ); // Выведет 0.

let apples = "1";
let oranges = "9";

alert( apples + oranges ); // Выведет 19.

// Проебразование в числа:
alert( +apples + +oranges); // Выведет 10.

// Проебразование в числа (более длинное):
alert( Number(apples) + Number(oranges)); // Выведет 10.


// Присваивание (=) возвращает значение:

let a1 = 1;
let b1 = 4;

let c1 = 6 - (a1 = 1 + b1);

alert(a1); // Выведет 5.
alert(c1); // Выведет 1.



// Присваивание по цепочке:

let a, b, c;

a = b = c = 2 + 2;

alert( a ); // 4
alert( b ); // 4
alert( c ); // 4

// Чтобы читать код было легче, лучше писать так:

/*
c = 2 + 2;
b = c;
a = c;
*/


// Сокращённая арифметика с присваиванием:

let n = 99;

n += 1;

alert(n); // Выведет 100.

n *= 5;

alert(n); // Выведет 5.


// Инкремент/Декремент:

// 1) Инкремент (++) увеличивает переменную на 1:

let plusOne = 34;
plusOne++;

alert(plusOne); // Выведет 35.

// 2) Декремент (--) уменьшает переменную на 1:

let minusOne = 34;
minusOne--;

alert(minusOne); // Выведет 33.

// (++) и (--) могут быть расположены и спереди операнда (переменной), суть не меняется.

// ﴾͡๏̯͡๏﴿ В чём же разница?? А ВОТ И УЗНАЕМ!

// 1. Сперва значение увелич. на 1, затем сохр. в переменной а2:

let counter = 1;
let a2 = ++counter; // (*)

alert(a2); // Выведет 2.

// 2. Тут же сохраняется значение до изменения (увеличения):

let counter1 = 1;
let a3 = counter1++; // (*) меняем ++counter на counter++

alert(a3); // Выведет 1.


// Побитовые операторы:

/*
AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )
*/


// Оператор 'запятая':

let a4 = (1 + 4, 18 + 1);

alert(a4); // Вернется только последняя сумма, то есть: 19.


/* Задание */

let a5 = prompt("Первое число?", 1);
let b5 = prompt("Второе число?", 2);

alert( +a5 + +b5 ); // Должно вывести 3.

/* Выполнено */